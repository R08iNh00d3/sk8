name: Android
on:
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        qt_ver: [5.12.3]
        qt_target: [android]
        qt_arch: [android_arm64_v8a]
    steps:
      - uses: actions/checkout@v2    
      - name: Setup
        run: |
          cd ..
          # WROOT=${GITHUB_WORKSPACE}
          WROOT=$(readlink -f .)
          echo "::set-env name=WORK::${WROOT}"
          echo "::set-env name=ANDROID_SDK_HOME::${WROOT}/sdk"
          echo "::set-env name=ANDROID_NDK_HOME::${WROOT}/ndk"
          echo "::set-env name=ANDROID_NDK_VERSION::r18b"
          echo "::set-env name=ANDROID_VERSION::28"
          echo "::set-env name=ANDROID_BUILD_TOOLS_VERSION::28.0.3"
          echo "::set-env name=GRADLE_VERSION::4.10.3"    

      - name: Install Qt
        # if: steps.cacheqt.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v2.2.1
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          target: ${{ matrix.qt_target }}
          # Architecture for Windows/Android
          arch: ${{ matrix.qt_arch }}
      - name: Install Android NDK
        run: |
          cd ..
          curl -L https://dl.google.com/android/repository/android-ndk-${ANDROID_NDK_VERSION}-linux-x86_64.zip -o ndk.zip
          unzip ndk.zip
          mv android-ndk-${ANDROID_NDK_VERSION} ndk
          
      - name: Install Android SDK
        run: |
          cd ..
          curl -L https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -o sdk.zip
          unzip sdk.zip
          yes | ./tools/bin/sdkmanager --licenses --sdk_root=${ANDROID_SDK_HOME}
          ./tools/bin/sdkmanager --update
          yes | ./tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "platforms;android-${ANDROID_VERSION}" "platform-tools" --sdk_root=${ANDROID_SDK_HOME}

      - name: Install Gradle
        run: |
          cd ..
          curl -L https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-all.zip -o gradle.zip
          unzip gradle.zip
          mv gradle-${GRADLE_VERSION} gradle
          
      - name: Setup ENV
        run: |
          echo "--- Setup PATH ---"
          PATH=${PATH}:${WORK}/gradle/bin:${WORK}/ndk
          echo "::set-env name=PATH::${PATH}"
          echo "PATH: ${PATH}"
          
          echo "--- Set ANDROID ENV ---"
          
          echo "::set-env name=ANDROID_HOME::${ANDROID_SDK_HOME}"
          echo "::set-env name=ANDROID_SDK_ROOT::${ANDROID_SDK_HOME}"
          echo "::set-env name=ANDROID_NDK_ROOT::${ANDROID_NDK_HOME}"
          echo "${ANDROID_NDK_ROOT}"
          #echo "::set-env name=ANDROID_NDK_HOST::linux-x86_64"
          #echo "::set-env name=ANDROID_NDK_PLATFORM::android-28"
          #echo "::set-env name=ANDROID_NDK_TOOLCHAIN_PREFIX::arm-linux-androideabi"
          #echo "::set-env name=ANDROID_NDK_TOOLCHAIN_VERSION::4.9"
          #echo "::set-env name=ANDROID_NDK_TOOLS_PREFIX::arm-linux-androideabi"

      - name: Compile APP
        run: |

          qmake -config release "CONFIG += release_android build_mobile"
          make clean
          make -j8
          make install INSTALL_ROOT=build/android/build
          androiddeployqt --gradle --no-gdbserver --output build/android/build --input android-libvesc_tool.so-deployment-settings.json --android-platform android-28
          mv build/android/build/build/outputs/apk/build-debug.apk build/android/vesc_tool_mobile.apk
          rm -rf build/android/build
          rm -rf build/android/obj
          rm -f build/android/libvesc_tool.so
          pushd build/android
          zip vesc_tool-android.zip vesc_tool_mobile.apk
          # rm -f vesc_tool_mobile.apk
          popd            
      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: vesc_tool-android
      #     path: build/android/vesc_tool_mobile.apk
      - name: queryReleaseWin
        id: queryReleaseWin
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.event.repository.full_name }}
          ref: ${{ github.event.ref }}
        run: |
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response={}
          try {
            $response = Invoke-RestMethod -Uri $url -Method Get
          } catch {
            Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ 
            Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
            echo "::set-output name=needCreateRelease::true"  
            return
          }
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          if ($latestUpUrl.Length -eq 0) {
            echo "::set-output name=needCreateRelease::true"  
          }
      - name: createReleaseWin
        id: createReleaseWin
        if: startsWith(github.event.ref, 'refs/tags/') && steps.queryReleaseWin.outputs.needCreateRelease == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: getLatestTagRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.event.repository.full_name }}
          upUrl: ${{ steps.createReleaseWin.outputs.upload_url }}
          ref: ${{ github.event.ref }}
        run: |
          if (${env:upUrl}.Length -gt 0) {
              $v=${env:upUrl}
              echo "::set-env name=uploadUrl::$v"
              return
          } 
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response = Invoke-RestMethod -Uri $url -Method Get
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          echo "::set-env name=uploadUrl::$latestUpUrl"
          Write-Host 'env uploadUrl:'${env:uploadUrl}
      - name: uploadRelease
        id: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ env.uploadUrl }}
          asset_path: build/android/vesc_tool-android.zip
          asset_name: vesc_tool-android.zip
          asset_content_type: application/zip
