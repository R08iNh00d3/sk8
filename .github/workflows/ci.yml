name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
      - cron: 0 0 * * 0

jobs:
  Qt:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        qt: [5.13.2]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
    - name: Install Qt (Linux|MacOS)
      if: (matrix.os == 'ubuntu-latest') || (matrix.os == 'macos-latest')
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt }}
    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt }}
        arch: win64_msvc2017_64
    - name: Install jom (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest http://download.qt.io/official_releases/jom/jom.zip -OutFile .\jom.zip
        expand-archive -path "jom.zip" -destinationpath "$HOME\jom"
        echo "::add-path::$HOME\jom"
    - name: Configure and compile VESC Tool (MacOS)
      if: matrix.os == 'macos-latest'
      run: ./build_macos
    - name: Configure and compile VESC Tool (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        qmake -config release "CONFIG += release_lin build_original"
        make -j2
    - name: Configure and compile VESC Tool (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $NumJobs = 8
        $MSVC = 2017
        $Arch = "amd64"
        $VTInstallDir = "build\win"
        call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $Arch
        # qmake -config release -tp vc "CONFIG+=release_win build_$type" -o $VTInstallDir\vesc_tool.vcxproj
        
        $type = original
        qmake -config release "CONFIG+=release_win build_$type"
        # jom clean
        jom -j $NumJobs

        # msbuild $VTInstallDir\vesc_tool.vcxproj /Zm:1000 /t:Build /p:Configuration=Release
        Remove-Item -Path $VTInstallDir\obj -Force -Recurse -ErrorAction Ignore

        Push-Location $VTInstallDir
        $DeployDir="vesc_tool_" + $type + "_win-" + "$Arch"
        $ZipFile=$DeployDir + ".zip"
        Create-Directory $DeployDir

        $VTApp = "vesc_tool_" + ${VTVer} + ".exe"
        Move-Item $VTApp $DeployDir
        windeployqt $DeployDir\$VTApp -qmldir=.
        Compress-Archive $DeployDir -DestinationPath $ZipFile

        Remove-Item * -Exclude *.zip -Recurse -ErrorAction Ignore
        # Remove-Item * -Include *.exe, *.dll -Exclude *.zip -Recurse -ErrorAction Ignore
        Pop-Location

      shell: powershell
    - name: Upload vesc tool macOS dmg
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v1
      with:
        name: vesc_tool-macOS
        path: build/macos
    - name: Upload vesc_tool_1.29
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v1
      with:
        name: vesc_tool-lin
        path: build/lin/vesc_tool_1.29
    - name: Upload vesc_tool_win-amd64
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v1
      with:
        name: vesc_tool_win-amd64
        path: build\win
