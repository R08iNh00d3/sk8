name: macOS

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  schedule:
      - cron: 0 0 * * 0

jobs:
  Qt:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        qt: [5.13.2]
        os: [macos-latest]

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
    - name: Install Qt (macOS)
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt }}
    - name: Configure and compile VESC Tool (MacOS)
      run: ./build_macos
    - name: Upload vesc_tool-macOS
      uses: actions/upload-artifact@v1
      with:
        name: vesc_tool-macOS
        path: build/macos
   
    # tag 查询github-Release
    - name: queryRelease
      id: queryReleaseMacos
      if: startsWith(github.event.ref, 'refs/tags/')
      shell: pwsh
      env:
        githubFullName: ${{ github.event.repository.full_name }}
        ref: ${{ github.event.ref }}
      run: |
        [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
        [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
        $response={}
        try {
          $response = Invoke-RestMethod -Uri $url -Method Get
        } catch {
          Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ 
          Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
          # 没查到，输出
          echo "::set-output name=needCreateRelease::true"  
          return
        }
        [string]$latestUpUrl = $response.upload_url
        Write-Host 'latestUpUrl:'$latestUpUrl
        if ($latestUpUrl.Length -eq 0) {
          # 没查到，输出
          echo "::set-output name=needCreateRelease::true"  
        }
    # tag 创建github-Release
    - name: createReleaseWin
      id: createReleaseWin
      if: startsWith(github.event.ref, 'refs/tags/') && steps.queryReleaseMacos.outputs.needCreateRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/create-release@v1.0.0
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
    # 重定向upload_url到环境变量uploadUrl。
    - name: getLatestTagRelease
      # tag 上一步无论成功还是失败都执行
      if: startsWith(github.event.ref, 'refs/tags/')
      shell: pwsh
      env:
        githubFullName: ${{ github.event.repository.full_name }}
        upUrl: ${{ steps.queryReleaseMacos.outputs.upload_url }}
        ref: ${{ github.event.ref }}
      run: |
        # upUrl不为空，导出就完事
        if (${env:upUrl}.Length -gt 0) {
            $v=${env:upUrl}
            echo "::set-env name=uploadUrl::$v"
            return
        } 
        [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
        [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
        $response = Invoke-RestMethod -Uri $url -Method Get
        [string]$latestUpUrl = $response.upload_url
        Write-Host 'latestUpUrl:'$latestUpUrl
        echo "::set-env name=uploadUrl::$latestUpUrl"
        Write-Host 'env uploadUrl:'${env:uploadUrl}
    # tag 上传Release
    - name: uploadRelease
      id: uploadRelease
      if: startsWith(github.event.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1.0.1
      with:
        upload_url: ${{ env.uploadUrl }}
        asset_path: .\build\win\vesc_tool-macOS.dmg
        asset_name: vesc_tool_platinum-macOS.dmg
        asset_content_type: application/applefile